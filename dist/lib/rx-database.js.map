{"version":3,"sources":["../../src/rx-database.ts"],"names":["USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","name","storage","instanceCreationOptions","password","multiInstance","eventReduce","options","idleQueue","internalStore","localDocumentsStore","broadcastChannel","token","_subs","destroyed","subject","Subject","observable$","asObservable","broadcastChannel$","collections","dangerousRemoveCollectionInfo","allDocs","writeData","map","doc","deletedDoc","_deleted","previous","document","bulkWrite","$emit","changeEvent","next","databaseToken","writeToSocket","removeCollectionDoc","schema","docId","_collectionNamePrimary","writeDoc","lockedRun","addCollections","collectionCreators","findDocumentsById","Object","keys","collectionDocs","internalDocByCollectionName","Array","from","entries","forEach","key","schemaHashByName","Promise","all","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","hookData","bulkPutDocs","ret","collection","collectionName","push","normalized","version","_attachments","defineProperty","get","length","removeCollection","destroy","_removeAllOfCollection","then","knownVersions","v","databaseName","storageInstances","instance","storageInstance","remove","fn","wrapCall","requestIdlePromise","exportJSON","_decrypted","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","PROMISE_RESOLVE_FALSE","sub","unsubscribe","col","close","removeRxDatabase","throwIfDatabaseNameUsed","has","link","_ensureStorageTokenExists","rxDatabase","storageTokenDocumentId","storageTokenDoc","storageToken","_id","value","sendOverChannel","cE","postMessage","docs","relevantDocs","filter","split","_prepareBroadcastChannel","addEventListener","msg","subscribe","createRxDatabaseStorageInstances","createStorageInstance","INTERNAL_STORAGE_NAME","createKeyObjectStorageInstance","prepare","localDocsSub","changeStream","rxStorageChangeEvent","createRxDatabase","ignoreDuplicate","overwritable","validatePassword","add","BroadcastChannel","IdleQueue","colDoc","id","parseInt","primaryPath","primaryKey","localInstance","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport {\n    isRxChangeEventIntern,\n    RxChangeEventBroadcastChannelData\n} from './rx-change-event';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        /**\n         * Stores the local documents which are attached to this database.\n         */\n        public readonly localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * If multiInstance: true\n         * we need the broadcast channel for the database.\n         */\n        public readonly broadcastChannel?: BroadcastChannel,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    private subject: Subject<RxChangeEvent> = new Subject();\n    private observable$: Observable<RxChangeEvent> = this.subject.asObservable();\n    public storageToken?: string;\n    public broadcastChannel$: Subject<RxChangeEvent> = new Subject();\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments(this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEvent: RxChangeEvent) {\n\n        // emit into own stream\n        this.subject.next(changeEvent);\n\n        // write to socket if event was created by this instance\n        if (changeEvent.databaseToken === this.token) {\n            writeToSocket(this as any, changeEvent);\n        }\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return _collectionNamePrimary(name, schema);\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Array.from(collectionDocs.entries()).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName]\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs, !!internalDoc);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName,\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        if ((this.collections as any)[collectionName]) {\n            (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return _removeAllOfCollection(this as any, collectionName)\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    idleQueue: this.idleQueue,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => this.lockedRun(\n                            () => Promise.all([\n                                instance.storageInstance.remove(),\n                                instance.localDocumentsStore.remove()\n                            ])\n                        )\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n        this.destroyed = true;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEvent: RxChangeEvent\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        rxDatabase.multiInstance &&\n        !isRxChangeEventIntern(changeEvent) &&\n        rxDatabase.broadcastChannel\n    ) {\n        const sendOverChannel: RxChangeEventBroadcastChannelData = {\n            cE: changeEvent,\n            storageToken: rxDatabase.storageToken as string\n        };\n        return rxDatabase.broadcastChannel\n            .postMessage(sendOverChannel)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments(rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    if (!rxDatabase.broadcastChannel) {\n        throw newRxError('SNH', { args: { rxDatabase } });\n    }\n\n    rxDatabase.broadcastChannel.addEventListener('message', (msg: RxChangeEventBroadcastChannelData) => {\n        if (msg.storageToken !== rxDatabase.storageToken) {\n            // not same storage-state\n            return;\n        }\n        if (msg.cE.databaseToken === rxDatabase.token) {\n            // this db was sender\n            return;\n        }\n        const changeEvent = msg.cE;\n\n        rxDatabase.broadcastChannel$.next(changeEvent);\n    });\n\n    rxDatabase._subs.push(\n        rxDatabase.broadcastChannel$.subscribe((cE: RxChangeEvent) => {\n            rxDatabase.$emit(cE);\n        })\n    );\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    idleQueue: IdleQueue,\n    broadcastChannel?: BroadcastChannel\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            idleQueue,\n            broadcastChannel\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        idleQueue,\n        broadcastChannel\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream().subscribe(\n        rxStorageChangeEvent => {\n            rxDatabase.$emit(\n                storageChangeEventToRxChangeEvent(\n                    true,\n                    rxStorageChangeEvent,\n                    rxDatabase as any\n                )\n            );\n        }\n    );\n    rxDatabase._subs.push(localDocsSub);\n\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        idleQueue,\n        broadcastChannel\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const idleQueue = new IdleQueue();\n\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {},\n        idleQueue\n    );\n\n    const docs = await getAllDocuments(storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {},\n                            idleQueue\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {},\n                        idleQueue\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}