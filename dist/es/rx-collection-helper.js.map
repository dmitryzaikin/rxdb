{"version":3,"sources":["../../src/rx-collection-helper.ts"],"names":["flatClone","newRxError","runPluginHooks","getSingleDocument","writeSingle","overwritable","writeToStorageInstance","collection","writeRow","overwrite","toStorageInstance","previous","_handleToStorageInstance","undefined","document","database","lockedRun","storageInstance","writeResult","ret","_handleFromStorageInstance","useErr","primary","documentId","status","singleRes","args","name","id","pouchDbError","data","col","isDevMode","schema","fillPrimaryKey","_crypter","encrypt","hookParams","doc","noDecrypt","decrypt","fillObjectDataBeforeInsert","useJson","fillObjectWithDefaults","getCollectionLocalInstanceName","collectionName","createRxCollectionStorageInstances","rxDatabase","storageInstanceCreationParams","instanceCreationOptions","broadcastChannel","Promise","all","storage","createStorageInstance","createKeyObjectStorageInstance","databaseName","options","idleQueue","localDocumentsStore"],"mappings":"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","sourcesContent":["import type {\n    BulkWriteRow,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxStorageBulkWriteError,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance\n} from './types';\nimport {\n    flatClone\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport { runPluginHooks } from './hooks';\nimport { getSingleDocument, writeSingle } from './rx-storage-helper';\nimport { RxCollectionBase } from './rx-collection';\nimport { overwritable } from './overwritable';\n\n\n/**\n * Every write access on the storage engine,\n * goes throught this method\n * so we can run hooks and resolve stuff etc.\n */\nexport async function writeToStorageInstance<RxDocumentType>(\n    collection: RxCollection<RxDocumentType, any> | RxCollectionBase<any, RxDocumentType, any>,\n    writeRow: BulkWriteRow<RxDocumentType>,\n    overwrite: boolean = false\n): Promise<\n    RxDocumentData<RxDocumentType>\n> {\n    const toStorageInstance: BulkWriteRow<any> = {\n        previous: writeRow.previous ? _handleToStorageInstance(collection, flatClone(writeRow.previous)) : undefined,\n        document: _handleToStorageInstance(collection, flatClone(writeRow.document))\n    };\n\n    while (true) {\n        try {\n            const writeResult = await collection.database.lockedRun(\n                () => writeSingle(\n                    collection.storageInstance,\n                    toStorageInstance\n                )\n            );\n            // on success, just return the result\n\n            const ret = _handleFromStorageInstance(collection, writeResult);\n            return ret;\n        } catch (err: any) {\n            const useErr: RxStorageBulkWriteError<RxDocumentType> = err as any;\n            const primary = useErr.documentId;\n            if (overwrite && useErr.status === 409) {\n                // we have a conflict but must overwrite\n                // so get the new revision\n                const singleRes = await collection.database.lockedRun(\n                    () => getSingleDocument(collection.storageInstance, primary)\n                );\n                if (!singleRes) {\n                    throw newRxError('SNH', { args: { writeRow } });\n                }\n                toStorageInstance.previous = singleRes;\n                // now we can retry\n            } else if (useErr.status === 409) {\n                throw newRxError('COL19', {\n                    collection: collection.name,\n                    id: primary,\n                    pouchDbError: useErr,\n                    data: writeRow\n                });\n            } else {\n                throw useErr;\n            }\n        }\n    }\n}\n\n/**\n * wrappers to process document data beofre/after it goes to the storage instnace.\n * Used to handle keycompression, encryption etc\n */\nexport function _handleToStorageInstance(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any\n) {\n    // ensure primary key has not been changed\n    if (overwritable.isDevMode()) {\n        col.schema.fillPrimaryKey(data);\n    }\n\n    data = (col._crypter as any).encrypt(data);\n\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('preWriteToStorageInstance', hookParams);\n\n    return hookParams.doc;\n}\n\nexport function _handleFromStorageInstance(\n    col: RxCollection | RxCollectionBase<any, any, any>,\n    data: any,\n    noDecrypt = false\n) {\n\n    const hookParams = {\n        collection: col,\n        doc: data\n    };\n    runPluginHooks('postReadFromInstance', hookParams);\n\n    if (noDecrypt) {\n        return hookParams.doc;\n    }\n\n    return (col._crypter as any).decrypt(hookParams.doc);\n}\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert(\n    collection: RxCollection | RxCollectionBase<any>,\n    data: any\n): any {\n    let useJson = collection.schema.fillObjectWithDefaults(data);\n    useJson = collection.schema.fillPrimaryKey(useJson);\n\n    return useJson;\n}\n\n\nexport function getCollectionLocalInstanceName(collectionName: string): string {\n    return collectionName + '-local';\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstances<RxDocumentType, Internals, InstanceCreationOptions>(\n    collectionName: string,\n    rxDatabase: RxDatabase,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>,\n    instanceCreationOptions: InstanceCreationOptions\n): Promise<{\n    storageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>\n}> {\n    storageInstanceCreationParams.broadcastChannel = rxDatabase.broadcastChannel;\n    const [\n        storageInstance,\n        localDocumentsStore\n    ] = await Promise.all([\n        rxDatabase.storage.createStorageInstance<RxDocumentType>(\n            storageInstanceCreationParams\n        ),\n        rxDatabase.storage.createKeyObjectStorageInstance({\n            databaseName: rxDatabase.name,\n            /**\n             * Use a different collection name for the local documents instance\n             * so that the local docs can be kept while deleting the normal instance\n             * after migration.\n             */\n            collectionName: getCollectionLocalInstanceName(collectionName),\n            options: instanceCreationOptions,\n            idleQueue: rxDatabase.idleQueue,\n            broadcastChannel: rxDatabase.broadcastChannel\n        })\n    ]);\n\n    return {\n        storageInstance,\n        localDocumentsStore\n    };\n}\n"],"file":"rx-collection-helper.js"}